
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ГруппаОтбораСчет = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораСчет.Использование = Ложь;
	ГруппаОтбораСчет.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбораСчет = ГруппаОтбораСчет.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСчет.Использование = Истина;
	ЭлементОтбораСчет.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетСписания");
	ЭлементОтбораСчет.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементОтбораСчет = ГруппаОтбораСчет.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСчет.Использование = Истина;
	ЭлементОтбораСчет.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетЗачисления");
	ЭлементОтбораСчет.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СчетИспользованиеПриИзменении(Элемент)
	ПрименитьОтборПоСчетам();
КонецПроцедуры

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	СчетИспользование = ЗначениеЗаполнено(Счет);
	
	ПрименитьОтборПоСчетам();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОстатокНаСчетеСписания = 0;
	ОстатокНаСчетеЗачисления = 0;
	
	СтрСписок = Элементы.Список.ТекущиеДанные;
	Если СтрСписок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрСписок.СчетСписания)
		Или ЗначениеЗаполнено(СтрСписок.СчетЗачисления) Тогда
		
		Остатки = ОстаткиНаСчетахПоСтрокеСписка(СтрСписок.Дата, СтрСписок.СчетСписания, СтрСписок.СчетЗачисления);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Остатки, "ОстатокНаСчетеСписания, ОстатокНаСчетеЗачисления");
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// BSLLS:TransferringParametersBetweenClientAndServer-off
// Код БСП модифицировать не буду
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
// BSLLS:TransferringParametersBetweenClientAndServer-on

&НаКлиенте
Процедура ОбъединитьВыделенныеРасходы(Команда)
	Ссылки = Элементы.Список.ВыделенныеСтроки;
	Для Каждого Ссылка Из Ссылки Цикл
		Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.Расход") Тогда
			ПоказатьПредупреждение(, НСтр("ru='Команда доступна только для документов ""Расход""'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеОбъединенияДокументов", ЭтотОбъект);
	ДоходыРасходыСлужебныйКлиент.НачатьОбъединениеДокументовРасход(Ссылки, ОповещениеОЗавершении, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеДокументыЖурнала(Команда)
	ОткрытьФорму("ЖурналДокументов.ВсеДокументыДоходовРасходов.Форма.ВсеДокументыЖурнала");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПрименитьОтборПоСчетам()
	Если Не ЗначениеЗаполнено(Счет) Тогда
		СчетИспользование = Ложь;
	КонецЕсли;
	
	ГруппаОтбора = Список.Отбор.Элементы.Получить(0);
	ГруппаОтбора.Использование = СчетИспользование;
	
	Если СчетИспользование Тогда
		Для Каждого ЭлементОтбора Из ГруппаОтбора.Элементы Цикл
			ЭлементОтбора.ПравоеЗначение = Счет;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбъединенияДокументов(РезультатОперации, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияПятьДенегКлиент.ПоказатьОшибкуДлительнойОперации(РезультатОперации);
	
	Если Не ОбщегоНазначенияПятьДенегКлиент.ДлительнаяОперацияУспешна(РезультатОперации) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = ПолучитьИзВременногоХранилища(РезультатОперации.АдресРезультата);
	Если ЗначениеЗаполнено(НовыйДокумент) Тогда
		ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъектов(Новый ОписаниеТипов("ДокументСсылка.Расход"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Документы не были объединены. Подробности выведены в панель сообщений'"));
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстаткиНаСчетахПоСтрокеСписка(Знач Дата, Знач СчетСписания, Знач СчетЗачисления)
	Результат = Новый Структура("ОстатокНаСчетеСписания, ОстатокНаСчетеЗачисления", 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОстаткиНаСчетахОстатки.Счет КАК Счет,
		|	ОстаткиНаСчетахОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиНаСчетах.Остатки(&Период, Счет В (&СчетСписания, &СчетЗачисления)) КАК ОстаткиНаСчетахОстатки";
	
	Запрос.УстановитьПараметр("Период", Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетЗачисления", СчетЗачисления);
	Запрос.УстановитьПараметр("СчетСписания", СчетСписания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Счет = СчетСписания Тогда
			Результат.ОстатокНаСчетеСписания = Выборка.СуммаОстаток;
		КонецЕсли;
		
		Если Выборка.Счет = СчетЗачисления Тогда
			Результат.ОстатокНаСчетеЗачисления = Выборка.СуммаОстаток;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти
