
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ДоступныеТипы.ЗагрузитьЗначения(Документы.ТипВсеСсылки().Типы());
	ДоступныеТипы.СортироватьПоЗначению();
	
	ТипДокументов = ДоступныеТипы[0].Значение;
	ПриИзмененииТипаДокумента(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипДокументовНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьТипДокументовАсинх();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаписатьДвижения(Команда)
	ПерезаписываемыеРегистры = Новый Массив;
	Для Каждого ЭлементРегистры Из СписокРегистров Цикл
		Если ЭлементРегистры.Пометка Тогда
			ПерезаписываемыеРегистры.Добавить(ЭлементРегистры.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерезаписываемыеРегистры.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбран ни один регистр'"));
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьПерезаписьНаСервере(Список.ВыгрузитьЗначения(),
		СтрСоединить(ПерезаписываемыеРегистры, ","));
	//
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеПерезаписи", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ОповещениеОЗавершении, ПараметрыОжидания);
	//
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция НачатьПерезаписьНаСервере(Знач Ссылки, Знач ПерезаписываемыеРегистры)
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
		"Обработки.ПерезаписьДвиженийДокументовБезПерепроведения.ПерезаписатьДвижения",
		Ссылки, ПерезаписываемыеРегистры);
	//
КонецФункции

&НаКлиенте
Процедура ПослеПерезаписи(РезультатОперации, ДополнительныеПараметры) Экспорт
	Если РезультатОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатОперации.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, РезультатОперации.КраткоеПредставлениеОшибки,, НСтр("ru='Возникла ошибка'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("ru='Движения по всем документам успешно перезаписаны'"));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТипаДокумента(Форма)
	Форма.Список.Очистить();
	
	Форма.СписокРегистров.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьСписок(Форма.СписокРегистров,
		СписокРегистровПоТипуДокумента(Форма.ТипДокументов));
	//
	Для Каждого ЭлементРегистры Из Форма.СписокРегистров Цикл
		ЭлементРегистры.Пометка = Истина;
	КонецЦикла;
	
	Форма.Список.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.ТипДокументов));
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокРегистровПоТипуДокумента(Знач Тип)
	ОбщегоНазначенияКлиентСервер.Проверить(Документы.ТипВсеСсылки().СодержитТип(Тип),
		НСтр("ru='Переданный тип не является типом ссылки на документ'"));
	//
	
	ПустаяСсылка = Новый(Тип);
	МетаданныеДокумента = ПустаяСсылка.Метаданные();
	
	НовыйСписок = Новый СписокЗначений;
	Для Каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		НовыйСписок.Добавить(МетаданныеРегистра.Имя, ОбщегоНазначения.ПредставлениеОбъекта(МетаданныеРегистра));
	КонецЦикла;
	
	Возврат НовыйСписок;
КонецФункции

&НаКлиенте
Асинх Процедура ВыбратьТипДокументовАсинх()
	ВыбранныйЭлемент = Ждать ДоступныеТипы.ВыбратьЭлементАсинх(НСтр("ru='Выберите тип'"));
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = ТипДокументов Тогда
		Возврат;
	КонецЕсли;
	
	ТипДокументов = ВыбранныйЭлемент.Значение;
	ПриИзмененииТипаДокумента(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти
