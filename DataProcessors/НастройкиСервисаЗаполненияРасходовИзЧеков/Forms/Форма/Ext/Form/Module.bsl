
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИспользоватьСервис = ПолучитьФункциональнуюОпцию("СервисЗаполненияРасходовИзЧеков");
	ИсключатьСтрокиСНулевойСуммой = Константы.ИсключатьСтрокиСНулевойСуммойПриЗагрузкеРасходовИзЧека.Получить();
	Элементы.ГруппаНастройкиСервиса.Доступность = ИспользоватьСервис;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Асинх Процедура ИспользоватьСервисПриИзменении(Элемент)
	Если ИспользоватьСервис Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='У меня есть токен'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Ждать ВопросАсинх(НСтр("ru='Для использования сервиса требуется токен API сервиса proverkacheka.com'"), Кнопки);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			ИспользоватьСервис = Ложь;
			Возврат;
		КонецЕсли;
		
		НовыйТокен = Ждать ВвестиСтрокуАсинх("", НСтр("ru='Введите токен'"));
		Если НовыйТокен = Неопределено Тогда
			ИспользоватьСервис = Ложь;
			Возврат;
		КонецЕсли;
		
		ДлительнаяОперация = НачатьПроверкуТокенаИВключениеСервисаНаСервере(НовыйТокен);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru='Выполняется проверка введенного токена и включение работы с сервисом'");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеПроверкиТокенаИВключенияСервиса", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	Иначе
		Ответ = Ждать ВопросАсинх(НСтр("ru = 'Отключение сервиса приведет к удалению из информационной базы
                                        |токена API сервиса proverkacheka.com
                                        |Отключить использование сервиса?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ИспользоватьСервис = Истина;
			Возврат;
		КонецЕсли;
		
		ОтключитьСервис();
		Элементы.ГруппаНастройкиСервиса.Доступность = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
		ПоказатьПредупреждение(, НСтр("ru='Использование сервиса отключено'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсключатьСтрокиСНулевойСуммойПриИзменении(Элемент)
	ИсключатьСтрокиСНулевойСуммойПриИзмененииНаСервере(ИсключатьСтрокиСНулевойСуммой);
	Состояние(НСтр("ru='Сохранено'"));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция НачатьПроверкуТокенаИВключениеСервисаНаСервере(Знач НовыйТокен)
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения,
		"Обработки.НастройкиСервисаЗаполненияРасходовИзЧеков.ПроверитьТокенИВключитьСервис", НовыйТокен);
КонецФункции

&НаКлиенте
Процедура ПослеПроверкиТокенаИВключенияСервиса(РезультатОперации, ДополнительныеПараметры) Экспорт
	ОбщегоНазначенияПятьДенегКлиент.ПоказатьОшибкуДлительнойОперации(РезультатОперации);
	Если Не ОбщегоНазначенияПятьДенегКлиент.ДлительнаяОперацияУспешна(РезультатОперации) Тогда
		ИспользоватьСервис = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	ПоказатьПредупреждение(, НСтр("ru='Использование сервиса успешно включено'"));
	Элементы.ГруппаНастройкиСервиса.Доступность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтключитьСервис()
	НачатьТранзакцию();
	Попытка
		СервисЗаполненияРасходовИзЧеков.ЗаписатьТокен(Неопределено);
		Константы.СервисЗаполненияРасходовИзЧеков.Установить(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсключатьСтрокиСНулевойСуммойПриИзмененииНаСервере(Знач НовоеЗначение)
	Константы.ИсключатьСтрокиСНулевойСуммойПриЗагрузкеРасходовИзЧека.Установить(НовоеЗначение);
КонецПроцедуры

#КонецОбласти
