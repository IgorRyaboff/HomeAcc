
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОтслеживаемыеСобытия = Новый Массив;
	ОтслеживаемыеСобытия.Добавить("Запись_Доход");
	ОтслеживаемыеСобытия.Добавить("Запись_ПереводМеждуСчетами");
	ОтслеживаемыеСобытия.Добавить("Запись_ПроизвольнаяОперацияПоСчетам");
	ОтслеживаемыеСобытия.Добавить("Запись_Расход");
	
	Если ОтслеживаемыеСобытия.Найти(ИмяСобытия) <> Неопределено Тогда
		ПодобратьДокументы();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	ПодобратьДокументы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрОперации = Элементы.Операции.ТекущиеДанные;
	Если СтрОперации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ОперацииДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрОперации.Документ) Тогда
			ПоказатьЗначение(, СтрОперации.Документ);
		Иначе
			СоздатьДокументАсинх(СтрОперации);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ЗагрузитьВыписку(Команда)
	Фильтр = НСтр("ru='Выписка в формате CSV|*.csv|Все файлы|*'");
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(, Ложь, Фильтр);
	
	ОписаниеПомещенногоФайла = Ждать ПоместитьФайлНаСерверАсинх(,,, ПараметрыДиалога, УникальныйИдентификатор);
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьВыпискуНаСервере(ОписаниеПомещенногоФайла.Адрес);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодобранныеДокументы(Команда)
	ПодобратьДокументы();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Асинх Процедура СоздатьДокументАсинх(СтрОперации)
	ДоступныеТипыДокументов = Новый СписокЗначений;
	Если СтрОперации.Сумма > 0 Тогда
		ДоступныеТипыДокументов.Добавить(Тип("ДокументСсылка.Доход"));
		ДоступныеТипыДокументов.Добавить(Тип("ДокументСсылка.ПереводМеждуСчетами"));
		ДоступныеТипыДокументов.Добавить(Тип("ДокументСсылка.ПроизвольнаяОперацияПоСчетам"));
	ИначеЕсли СтрОперации.Сумма < 0 Тогда
		ДоступныеТипыДокументов.Добавить(Тип("ДокументСсылка.ПереводМеждуСчетами"));
		ДоступныеТипыДокументов.Добавить(Тип("ДокументСсылка.ПроизвольнаяОперацияПоСчетам"));
		ДоступныеТипыДокументов.Добавить(Тип("ДокументСсылка.Расход"));
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='В этой строке отсутствует сумма'"));
		Возврат;
	КонецЕсли;
	
	ВыбранныйЭлемент = Ждать ВыбратьИзСпискаАсинх(ДоступныеТипыДокументов, Элементы.ОперацииДокумент);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Новый(ВыбранныйЭлемент.Значение);
	ПолноеИмяМетаданных = ОбщегоНазначенияПятьДенегВызовСервера.ПолноеИмяОбъектаПоСсылке(Ссылка);
	
	ДанныеЗаполнения = Новый Структура("Дата, Описание, Сумма, Счет, ЭтоВыпискаРайффайзенбанка");
	ДанныеЗаполнения.Дата = СтрОперации.Дата;
	ДанныеЗаполнения.Описание = СтрОперации.Описание;
	ДанныеЗаполнения.Сумма = ?(СтрОперации.Сумма >= 0, СтрОперации.Сумма, -СтрОперации.Сумма);
	ДанныеЗаполнения.Счет = Счет;
	ДанныеЗаполнения.ЭтоВыпискаРайффайзенбанка = Истина;
	
	ОткрытьФорму(ПолноеИмяМетаданных + ".ФормаОбъекта", Новый Структура("Основание", ДанныеЗаполнения));
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВыпискуНаСервере(Знач АдресФайла)
	РезультатЗагрузки = Обработки.СверкаСБанковскойВыпискойРайффайзенбанка.ПрочитатьВыписку(АдресФайла);
	
	Операции.Загрузить(РезультатЗагрузки);
	
	Период.ДатаНачала = Дата(3999, 12, 31, 23, 59, 59);
	Период.ДатаОкончания = Дата(1, 1, 1);
	
	Для Каждого СтрОперации Из Операции Цикл
		СтрОперации.Индекс = Операции.Индекс(СтрОперации);
		
		Если СтрОперации.Дата < Период.ДатаНачала Тогда
			Период.ДатаНачала = СтрОперации.Дата;
		КонецЕсли;
		
		Если СтрОперации.Дата > Период.ДатаОкончания Тогда
			Период.ДатаОкончания = СтрОперации.Дата;
		КонецЕсли;
	КонецЦикла;
	
	ПодобратьДокументы();
КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументы()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацииВыписки.Индекс КАК Индекс,
		|	ОперацииВыписки.Дата КАК Дата,
		|	ОперацииВыписки.Сумма КАК Сумма
		|ПОМЕСТИТЬ ВТ_ОперацииВыписки
		|ИЗ
		|	&ОперацииВыписки КАК ОперацииВыписки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиНаСчетахОбороты.Период КАК Период,
		|	ОстаткиНаСчетахОбороты.Регистратор КАК Регистратор,
		|	ОстаткиНаСчетахОбороты.СуммаОборот КАК СуммаОборот
		|ПОМЕСТИТЬ ВТ_Документы
		|ИЗ
		|	РегистрНакопления.ОстаткиНаСчетах.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, Счет = &Счет) КАК ОстаткиНаСчетахОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОперацииВыписки.Индекс КАК Индекс,
		|	ВТ_Документы.Регистратор КАК Регистратор
		|ИЗ
		|	ВТ_ОперацииВыписки КАК ВТ_ОперацииВыписки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
		|		ПО ВТ_ОперацииВыписки.Дата = ВТ_Документы.Период
		|			И ВТ_ОперацииВыписки.Сумма = ВТ_Документы.СуммаОборот";
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.УстановитьПараметр("ОперацииВыписки", Операции.Выгрузить(, "Индекс, Дата, Сумма"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрОперации = Операции.Получить(Выборка.Индекс);
		СтрОперации.Документ = Выборка.Регистратор;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не найден (нажмите для создания>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Операции.Документ");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Поле = ЭлементУО.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОперацииДокумент.Имя);
КонецПроцедуры

#КонецОбласти
