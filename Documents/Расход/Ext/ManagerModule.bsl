
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует объект значениями по умолчанию
//
// Параметры:
//  Объект - ДокументОбъект.Расход, ДанныеФормыСтруктура -
Процедура ЗаполнитьНовыйОбъект(Объект) Экспорт
	Объект.Ответственный = Пользователи.ТекущийПользователь();
КонецПроцедуры

Процедура ДобавитьКомандыСозданияНаОсновании(Команды, НастройкиФормы) Экспорт
	Документы.ОтменаРасхода.ДобавитьКомандуСозданияНаОсновании(Команды);
	Документы.ПроизвольнаяОперацияПоСчетам.ДобавитьКомандуСозданияНаОсновании(Команды);
КонецПроцедуры

// Добавляет команды отчетов для данного документа
//
// Параметры:
//  КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//  Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	Отчеты.ОстаткиНаСчетах.ДобавитьКомандуОтчета(КомандыОтчетов);
КонецПроцедуры

// Формирует наборы движений по регистрам для переданного документа
//
// Параметры:
//  Ссылка - ДокументСсылка.Расход -
//
// Возвращаемое значение:
//  Структура - Ключ структуры соответствует имени регистра.
//              Значение каждого свойства - ТаблицаЗначений с движениями по регистру
Функция ДанныеДляПроведенияДокумента(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Расход.Дата КАК Период,
		|	ВЫБОР
		|		КОГДА ПравилаВеденияАналитик.ВидДвижения = ""Приход""
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ КАК ВидДвижения,
		|	ПравилаВеденияАналитик.СтатьяАналитики КАК СтатьяАналитики,
		|	СУММА(РасходРасходы.Сумма) КАК Сумма
		|ИЗ
		|	Документ.Расход.Расходы КАК РасходРасходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Расход КАК Расход
		|		ПО РасходРасходы.Ссылка = Расход.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаВеденияАналитик КАК ПравилаВеденияАналитик
		|		ПО (РасходРасходы.СтатьяРасходов = (ВЫРАЗИТЬ(ПравилаВеденияАналитик.СтатьяДоходовРасходов КАК Справочник.СтатьиРасходов)))
		|ГДЕ
		|	РасходРасходы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПравилаВеденияАналитик.СтатьяАналитики,
		|	Расход.Дата,
		|	ВЫБОР
		|		КОГДА ПравилаВеденияАналитик.ВидДвижения = ""Приход""
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	Расход.Дата КАК Период,
		|	Расход.Счет КАК Счет,
		|	Расход.СуммаДокумента КАК Сумма
		|ИЗ
		|	Документ.Расход КАК Расход
		|ГДЕ
		|	Расход.Ссылка = &Ссылка
		|	И Расход.Счет <> ЗНАЧЕНИЕ(Справочник.Счета.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расход.Дата КАК Период,
		|	РасходРасходы.КатегорияРасходов КАК КатегорияРасходов,
		|	РасходРасходы.Номенклатура КАК Номенклатура,
		|	РасходРасходы.СтатьяРасходов КАК СтатьяРасходов,
		|	Расход.Счет КАК Счет,
		|	СУММА(РасходРасходы.Сумма) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА СпрНоменклатура.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|					И НЕ СпрНоменклатура.ЕдиницаИзмерения.Безразмерная
		|				ТОГДА РасходРасходы.КоличествоВУпаковке * РасходРасходы.КоличествоУпаковок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество
		|ИЗ
		|	Документ.Расход.Расходы КАК РасходРасходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Расход КАК Расход
		|		ПО РасходРасходы.Ссылка = Расход.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО РасходРасходы.Номенклатура = СпрНоменклатура.Ссылка
		|ГДЕ
		|	Расход.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Расход.Дата,
		|	РасходРасходы.КатегорияРасходов,
		|	РасходРасходы.Номенклатура,
		|	РасходРасходы.СтатьяРасходов,
		|	Расход.Счет";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Движения = Новый Структура;
	
	Движения.Вставить("Аналитики", РезультатЗапроса[0].Выгрузить());
	Движения.Вставить("ОстаткиНаСчетах", РезультатЗапроса[1].Выгрузить());
	Движения.Вставить("Расходы", РезультатЗапроса[2].Выгрузить());
	
	Возврат Движения;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Объединяет несколько документов "Расход" в один новый документ
// Все предыдущие документы при этом помечаются на удаление
// У переданных документов должны совпадать дата и счет
//
// Параметры:
//  Ссылки	 - 	 - 
// 
// Возвращаемое значение:
//  ДокументСсылка.Расход - Новый документ, либо пустая ссылка (при ошибке)
Функция ОбъединитьДокументы(Знач Ссылки) Экспорт
	НачатьТранзакцию();
	Попытка
		Объекты = Новый Массив;
		Для Каждого Ссылка Из Ссылки Цикл
			Объект = Ссылка.ПолучитьОбъект();
			Объект.Заблокировать();
			Объекты.Добавить(Объект);
			
			Если Не Объект.Проведен Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Все выделенные документы должны быть проведены'"));
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		НовыйОбъект = СоздатьДокумент();
		ЗаполнитьНовыйОбъект(НовыйОбъект);
		
		НовыйОбъект.Комментарий = НСтр("ru='Создан объединением нескольких других документов'");
		ЗаполнитьЗначенияСвойств(НовыйОбъект, Объекты[0], "Счет, Дата");
		
		Если ЗначениеЗаполнено(НовыйОбъект.Счет) Тогда
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОстаткиНаСчетах");
			ЭлементБлокировки.УстановитьЗначение("Счет", НовыйОбъект.Счет);
			Блокировка.Заблокировать();
		КонецЕсли;
		
		Для Каждого УдаляемыйОбъект Из Объекты Цикл
			Если НовыйОбъект.Дата <> УдаляемыйОбъект.Дата Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Даты документов не совпадают'"));
				ОтменитьТранзакцию();
				Возврат ПустаяСсылка();
			КонецЕсли;
			
			Если НовыйОбъект.Счет <> УдаляемыйОбъект.Счет Тогда
				ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Счета документов не совпадают'"));
				ОтменитьТранзакцию();
				Возврат ПустаяСсылка();
			КонецЕсли;
			
			Для Каждого СтрИсточник Из УдаляемыйОбъект.Расходы Цикл
				СтрПриемник = НовыйОбъект.Расходы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрПриемник, СтрИсточник,, "НомерСтроки");
			КонецЦикла;
			
			УдаляемыйОбъект.УстановитьПометкуУдаления(Истина);
			УдаляемыйОбъект.Разблокировать();
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.Проверить(НовыйОбъект.ПроверитьЗаполнение(), НСтр("ru='Ошибка проверки заполнения'"));
		НовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
		НовыйОбъект.Разблокировать();
		
		Отказ = Ложь;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НовыйОбъект.Ссылка;
КонецФункции

#КонецОбласти

#КонецЕсли

