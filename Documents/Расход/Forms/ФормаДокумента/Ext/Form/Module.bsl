
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьУсловноеОформление();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОбщегоНазначенияПятьДенег.ЗаполнитьНовыйОбъектПриСозданииФормы(ЭтотОбъект);
	
	Элементы.НадписьСчетНеЗаполнен.Видимость = Не ЗначениеЗаполнено(Объект.Счет);
	
	ЗаполнитьОтклонениеЦенРасходовОтСреднейЦены(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Элементы.НадписьСчетНеЗаполнен.Видимость = Не ЗначениеЗаполнено(Объект.Счет);
	
	ЗаполнитьОтклонениеЦенРасходовОтСреднейЦены(ЭтотОбъект, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	КешСтатейРасходов = Новый ФиксированноеСоответствие(Новый Соответствие);
	ДополнитьКешСтатейРасходов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	    ОбновитьЭлементыДополнительныхРеквизитов();
	    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьОтклонениеЦенРасходовОтСреднейЦены(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СчетПриИзменении(Элемент)
	Элементы.НадписьСчетНеЗаполнен.Видимость = Не ЗначениеЗаполнено(Объект.Счет);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗаполнитьОтклонениеЦенРасходовОтСреднейЦены(ЭтотОбъект, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	Для Каждого СТЧ Из Объект.Расходы Цикл
		Если Не ЗначениеЗаполнено(СТЧ.КоличествоВУпаковке) Тогда
			СТЧ.КоличествоВУпаковке = 1;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьОтклонениеЦенРасходовОтСреднейЦены(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриАктивизацииСтроки(Элемент)
	ЗаполнитьСписокВыбораСтатейРасходов();
КонецПроцедуры

&НаКлиенте
Процедура РасходыНоменклатураПриИзменении(Элемент)
	ДополнитьКешСтатейРасходов();
	ЗаполнитьСписокВыбораСтатейРасходов();
	
	ТекДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Элементы.РасходыСтатьяРасходов.СписокВыбора.Количество() = 1 Тогда
			ТекДанные.СтатьяРасходов = Элементы.РасходыСтатьяРасходов.СписокВыбора[0].Значение;
		ИначеЕсли Элементы.РасходыСтатьяРасходов.СписокВыбора.НайтиПоЗначению(ТекДанные.СтатьяРасходов) = Неопределено Тогда
			ТекДанные.СтатьяРасходов = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДанные.СтатьяРасходов) Тогда
			ТекДанные.КатегорияРасходов = КатегорияРасходовПоУмолчанию(ТекДанные.СтатьяРасходов);
		Иначе
			ТекДанные.КатегорияРасходов = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	ТекДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.КоличествоУпаковок;
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоУпаковокПриИзменении(Элемент)
	ТекДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Сумма = ТекДанные.Цена * ТекДанные.КоличествоУпаковок;
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	ТекДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Цена = ?(ТекДанные.КоличествоУпаковок <> 0, ТекДанные.Сумма / ТекДанные.КоличествоУпаковок, 0);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтатьяРасходовПриИзменении(Элемент)
	ТекДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.СтатьяРасходов) Тогда
		ТекДанные.КатегорияРасходов = КатегорияРасходовПоУмолчанию(ТекДанные.СтатьяРасходов);
	Иначе
		ТекДанные.КатегорияРасходов = Неопределено;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// BSLLS:TransferringParametersBetweenClientAndServer-off
// Код БСП модифицировать не буду
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
// BSLLS:TransferringParametersBetweenClientAndServer-on

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Асинх Процедура ЗаполнитьИзЧека(Команда)
	Если Не Объект.Ссылка.Пустая() Или Объект.Расходы.Количество() > 0 Тогда
		Ответ = Ждать ВопросАсинх(НСтр("ru='Документ будет перезаполнен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеПолученияДанныхИзЧека", ЭтотОбъект);
	ОткрытьФорму("Документ.Расход.Форма.ФормаЗаполненияИзЧека",,,,,, ОповещениеОЗакрытии);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ДополнитьКешСтатейРасходов()
	ЗапрашиваемаяНоменклатура = Новый Массив;
	Для Каждого СТЧ Из Объект.Расходы Цикл
		Если КешСтатейРасходов.Получить(СТЧ.Номенклатура) = Неопределено Тогда
			ЗапрашиваемаяНоменклатура.Добавить(СТЧ.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗапрашиваемаяНоменклатура.Количество() > 0 Тогда
		НефиксированныйКеш = Новый Соответствие(КешСтатейРасходов);
		
		ЗапрошенныеСтатьиРасходов = СтатьиРасходовНоменклатуры(ЗапрашиваемаяНоменклатура);
		Для Каждого КлючЗнч Из ЗапрошенныеСтатьиРасходов Цикл
			НефиксированныйКеш[КлючЗнч.Ключ] = КлючЗнч.Значение;
		КонецЦикла;
		
		КешСтатейРасходов = Новый ФиксированноеСоответствие(НефиксированныйКеш);
	КонецЕсли;
КонецПроцедуры

// Перезаполняет реквизит табличной части Объект.Расходы.ОтклонениеОтСреднейЦены текущей формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  ОбновитьПолностью - Булево - Если Истина, кеш будет очищен и заполнен заново
//                               Если Ложь, кеш будет только дополняться недостающей номенклатурой
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтклонениеЦенРасходовОтСреднейЦены(Форма, ОбновитьПолностью = Ложь)
	КешСреднихЦен = КешСреднихЦен(Форма.КешСреднихЦен, Форма.Объект.Расходы, Форма.Объект.Дата, ОбновитьПолностью);
	Для Каждого СтрРасходы Из Форма.Объект.Расходы Цикл
		ЦенаИзКеша = КешСреднихЦен.Получить(СтрРасходы.Номенклатура);
		
		Если СтрРасходы.КоличествоВУпаковке <> 0 И ЗначениеЗаполнено(ЦенаИзКеша) Тогда
			ТекущаяЦена = СтрРасходы.Цена / СтрРасходы.КоличествоВУпаковке;
			ОтклонениеОтСреднейЦены = ТекущаяЦена - ЦенаИзКеша;
			ОтклонениеВПроцентах = ОтклонениеОтСреднейЦены / ЦенаИзКеша * 100;
			
			СтрРасходы.ТекущаяСредняяЦена = ЦенаИзКеша;
			СтрРасходы.ОтклонениеОтСреднейЦены = ОтклонениеВПроцентах;
		Иначе
			СтрРасходы.ТекущаяСредняяЦена = 0;
			СтрРасходы.ОтклонениеОтСреднейЦены = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Дополняет (при необходимости) кеш средних цен номенклатуры документа
//
// Параметры:
//  ТекущийКеш - Неопределено, ФиксированноеСоответствие -
//  ТабличнаяЧастьРасходы - ДанныеФормыСтруктура -
//  Период - Дата - Дата документа, за которую выбираются средние цены
//  ОбновитьПолностью - Булево - Если Истина, кеш будет очищен и заполнен заново
//                               Если Ложь, кеш будет только дополняться недостающей номенклатурой
//
// Возвращаемое значение:
//  ФиксированноеСоответствие -
&НаКлиентеНаСервереБезКонтекста
Функция КешСреднихЦен(ТекущийКеш, ТабличнаяЧастьРасходы, Период, ОбновитьПолностью = Ложь)
	Если Не ЗначениеЗаполнено(Период) Тогда
		Возврат Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;
	
	Если ТекущийКеш = Неопределено Или ОбновитьПолностью Тогда
		НовыйКеш = Новый Соответствие;
	Иначе
		НовыйКеш = Новый Соответствие(ТекущийКеш);
	КонецЕсли;
	
	НедостающаяНоменклатура = Новый Массив;
	Для Каждого СтрРасходы Из ТабличнаяЧастьРасходы Цикл
		Если НовыйКеш[СтрРасходы.Номенклатура] = Неопределено Тогда
			НедостающаяНоменклатура.Добавить(СтрРасходы.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если НедостающаяНоменклатура.Количество() > 0 Тогда
		КешНедостающейНоменклатуры = СредниеЦеныНоменклатурыНаСервере(НедостающаяНоменклатура, Период);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(НовыйКеш, КешНедостающейНоменклатуры, Истина);
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(НовыйКеш);
КонецФункции

//
// Параметры:
//  Номенклатура - Массив - Массив из СправочникСсылка.Номенклатура -
//  Период - Дата - Период, за который выбираются средние цены
//
// Возвращаемое значение:
//  Соответствие - Соответствие с ключом СправочникСсылка.Номенклатура и значением Число (средняя цена)
&НаСервереБезКонтекста
Функция СредниеЦеныНоменклатурыНаСервере(Знач Номенклатура, Знач Период)
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА РасходыОбороты.СуммаОборот ЕСТЬ NULL
		|				ИЛИ РасходыОбороты.КоличествоОборот = 0
		|			ТОГДА 0
		|		ИНАЧЕ РасходыОбороты.СуммаОборот / РасходыОбороты.КоличествоОборот
		|	КОНЕЦ КАК СредняяЦена
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Расходы.Обороты(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&Период, ДЕНЬ), МЕСЯЦ, -3), &Период, , Номенклатура В (&Номенклатура)) КАК РасходыОбороты
		|		ПО СправочникНоменклатура.Ссылка = РасходыОбороты.Номенклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка В(&Номенклатура)";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Номенклатура, Выборка.СредняяЦена);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораСтатейРасходов()
	Элементы.РасходыСтатьяРасходов.СписокВыбора.Очистить();
	ТекДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекДанные = Неопределено Или Не ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНеуточненнаяНоменклатура = (ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.Неуточненное"));
	Элементы.РасходыСтатьяРасходов.РежимВыбораИзСписка = Не ЭтоНеуточненнаяНоменклатура;
	
	Если ЗначениеЗаполнено(КешСтатейРасходов.Получить(ТекДанные.Номенклатура)) Тогда
		Элементы.РасходыСтатьяРасходов.СписокВыбора.ЗагрузитьЗначения(КешСтатейРасходов[ТекДанные.Номенклатура]);
	КонецЕсли;
КонецПроцедуры

//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура, Массив - Ссылка на номенклатуру или массив таких ссылок
//
// Возвращаемое значение:
//  Соответствие - Ключом является СправочникСсылка.Номенклатура, значением - массив из СправочникСсылка.СтатьиРасходов
&НаСервереБезКонтекста
Функция СтатьиРасходовНоменклатуры(Знач Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураСтатьиРасходов.Ссылка КАК Ссылка,
		|	НоменклатураСтатьиРасходов.СтатьяРасходов КАК СтатьяРасходов
		|ИЗ
		|	Справочник.Номенклатура.СтатьиРасходов КАК НоменклатураСтатьиРасходов
		|ГДЕ
		|	НоменклатураСтатьиРасходов.Ссылка В(&Номенклатура)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НоменклатураСтатьиРасходов.НомерСтроки";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Результат = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Если Результат[Выборка.Ссылка] = Неопределено Тогда
			Результат[Выборка.Ссылка] = Новый Массив;
		КонецЕсли;
		
		Результат[Выборка.Ссылка].Добавить(Выборка.СтатьяРасходов);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Вызывается командой заполнения "По шаблону"
//
// Параметры:
//  РезультатЗакрытия - Неопределено, Структура:
//  * ДанныеОЧеке - Структура - См. ПолучениеДанныхОЧеке.НовыеДанныеОЧеке()
//  * ПеренестиДатуВДокумент - Булево -
&НаКлиенте
Процедура ПослеПолученияДанныхИзЧека(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОЧеке = РезультатЗакрытия.ДанныеОЧеке;
	
	Объект.Расходы.Очистить();
	Для Каждого СтрИсточник Из ДанныеОЧеке.Товары Цикл
		СтрПриемник = Объект.Расходы.Добавить();
		СтрПриемник.КоличествоВУпаковке = 1;
		
		СтрПриемник.ПроизвольноеОписание = СтрИсточник.Наименование;
		СтрПриемник.Цена = СтрИсточник.Цена;
		СтрПриемник.КоличествоУпаковок = СтрИсточник.Количество;
		СтрПриемник.Сумма = СтрПриемник.Цена * СтрПриемник.КоличествоУпаковок;
	КонецЦикла;
	
	Если РезультатЗакрытия.ПеренестиДатуВДокумент Тогда
		Объект.Дата = ДанныеОЧеке.Дата;
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.Расходы.Итог("Сумма");
		
	ДополнитьКешСтатейРасходов();
	ЗаполнитьСписокВыбораСтатейРасходов();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция КатегорияРасходовПоУмолчанию(Знач СтатьяРасходов)
	Возврат Справочники.СтатьиРасходов.КатегорияРасходовПоУмолчанию(СтатьяРасходов);
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Использование = Истина;
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУО.Отбор, "Объект.Расходы.ОтклонениеОтСреднейЦены", 0, ВидСравненияКомпоновкиДанных.Больше);
	
	Поле = ЭлементУО.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(Элементы.РасходыОтклонениеОтСреднейЦены.Имя);
	Поле.Использование = Истина;
КонецПроцедуры

#КонецОбласти
